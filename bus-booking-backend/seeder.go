// package main

// import (
// 	"context"
// 	"fmt"
// 	"log"
// 	"math/rand"
// 	"time"

// 	"github.com/Go_final_exam/bus-booking-backend/src/config"
// 	"github.com/Go_final_exam/bus-booking-backend/src/models"
// 	"go.mongodb.org/mongo-driver/bson"
// 	"go.mongodb.org/mongo-driver/bson/primitive"
// 	"go.mongodb.org/mongo-driver/mongo"
// )

// var (
// 	companyCollection *mongo.Collection
// 	vehicleCollection *mongo.Collection
// 	tripCollection    *mongo.Collection
// )

// func main() {
// 	// 1. T·∫£i c·∫•u h√¨nh v√† k·∫øt n·ªëi DB
// 	cfg, err := config.LoadConfig()
// 	if err != nil {
// 		log.Fatalf("Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh: %v", err)
// 	}
// 	config.ConnectDB(cfg)

// 	// L·∫•y c√°c collection
// 	companyCollection = config.DB.Collection("companies")
// 	vehicleCollection = config.DB.Collection("vehicles")
// 	tripCollection = config.DB.Collection("trips")

// 	log.Println("B·∫Øt ƒë·∫ßu qu√° tr√¨nh seeding d·ªØ li·ªáu...")

// 	// 2. X√≥a d·ªØ li·ªáu c≈© (ƒë·ªÉ ƒë·∫£m b·∫£o l√†m s·∫°ch m·ªói l·∫ßn ch·∫°y)
// 	clearOldData()

// 	// 3. Seed d·ªØ li·ªáu theo th·ª© t·ª±
// 	companyIDs := seedCompanies()
// 	vehicleData := seedVehicles(companyIDs)
// 	seedTrips(vehicleData)

// 	log.Println("üéâ Seeding d·ªØ li·ªáu th√†nh c√¥ng!")
// }

// func clearOldData() {
// 	log.Println("--- X√≥a d·ªØ li·ªáu c≈© ---")
// 	ctx := context.Background()
// 	companyCollection.Drop(ctx)
// 	vehicleCollection.Drop(ctx)
// 	tripCollection.Drop(ctx)
// 	log.Println("ƒê√£ x√≥a c√°c collection c≈©.")
// }

// // seedCompanies t·∫°o d·ªØ li·ªáu cho c√°c nh√† xe
// func seedCompanies() []primitive.ObjectID {
// 	log.Println("--- Seeding Companies ---")
// 	ctx := context.Background()

// 	companies := []interface{}{
// 		models.Company{ID: primitive.NewObjectID(), Name: "Ph∆∞∆°ng Trang", Code: "FUTA", Description: "Nh√† xe ch·∫•t l∆∞·ª£ng cao Ph∆∞∆°ng Trang.", LogoURL: "https://futabus.vn/images/logo/bus-general-futa.png"},
// 		models.Company{ID: primitive.NewObjectID(), Name: "Th√†nh B∆∞·ªüi", Code: "THANHBUOI", Description: "D·ªãch v·ª• v·∫≠n chuy·ªÉn h√†nh kh√°ch v√† h√†ng h√≥a.", LogoURL: "https://thanhbuoi.com.vn/images/logo.png"},
// 		models.Company{ID: primitive.NewObjectID(), Name: "Kumho Samco", Code: "KUMHO", Description: "Nh√† xe uy t√≠n tuy·∫øn S√†i G√≤n - V≈©ng T√†u.", LogoURL: "https://kumhosamco.com.vn/images/logo-kumho-samco-buslines.png"},
// 	}

// 	result, err := companyCollection.InsertMany(ctx, companies)
// 	if err != nil {
// 		log.Fatalf("L·ªói khi seed companies: %v", err)
// 	}

// 	ids := make([]primitive.ObjectID, len(result.InsertedIDs))
// 	for i, id := range result.InsertedIDs {
// 		ids[i] = id.(primitive.ObjectID)
// 	}

// 	log.Printf("ƒê√£ t·∫°o %d companies.", len(ids))
// 	return ids
// }

// // seedVehicles t·∫°o d·ªØ li·ªáu cho c√°c lo·∫°i xe, li√™n k·∫øt v·ªõi nh√† xe
// func seedVehicles(companyIDs []primitive.ObjectID) map[primitive.ObjectID][]primitive.ObjectID {
// 	log.Println("--- Seeding Vehicles ---")
// 	ctx := context.Background()
// 	vehicleData := make(map[primitive.ObjectID][]primitive.ObjectID)
// 	var vehiclesToInsert []interface{}

// 	for _, companyID := range companyIDs {
// 		// M·ªói nh√† xe c√≥ 2 lo·∫°i xe
// 		vehicle1 := models.Vehicle{ID: primitive.NewObjectID(), Type: "Gi∆∞·ªùng n·∫±m 40 ch·ªó", TotalSeats: 40}
// 		vehicle2 := models.Vehicle{ID: primitive.NewObjectID(), Type: "Limousine 22 ch·ªó", TotalSeats: 22}

// 		vehiclesToInsert = append(vehiclesToInsert, vehicle1, vehicle2)
// 		vehicleData[companyID] = []primitive.ObjectID{vehicle1.ID, vehicle2.ID}
// 	}

// 	_, err := vehicleCollection.InsertMany(ctx, vehiclesToInsert)
// 	if err != nil {
// 		log.Fatalf("L·ªói khi seed vehicles: %v", err)
// 	}

// 	log.Printf("ƒê√£ t·∫°o %d vehicles.", len(vehiclesToInsert))
// 	return vehicleData
// }

// // seedTrips t·∫°o d·ªØ li·ªáu cho c√°c chuy·∫øn ƒëi
// func seedTrips(vehicleData map[primitive.ObjectID][]primitive.ObjectID) {
// 	log.Println("--- Seeding Trips ---")
// 	ctx := context.Background()
// 	var tripsToInsert []interface{}

// 	routes := []models.Route{
// 		{From: models.LocationPoint{Name: "TP. H·ªì Ch√≠ Minh"}, To: models.LocationPoint{Name: "ƒê√† L·∫°t"}},
// 		{From: models.LocationPoint{Name: "ƒê√† L·∫°t"}, To: models.LocationPoint{Name: "TP. H·ªì Ch√≠ Minh"}},
// 		{From: models.LocationPoint{Name: "TP. H·ªì Ch√≠ Minh"}, To: models.LocationPoint{Name: "V≈©ng T√†u"}},
// 		{From: models.LocationPoint{Name: "V≈©ng T√†u"}, To: models.LocationPoint{Name: "TP. H·ªì Ch√≠ Minh"}},
// 		{From: models.LocationPoint{Name: "H√† N·ªôi"}, To: models.LocationPoint{Name: "H·∫° Long"}},
// 		{From: models.LocationPoint{Name: "H·∫° Long"}, To: models.LocationPoint{Name: "H√† N·ªôi"}},
// 	}
// 	departureHours := []int{7, 9, 13, 17, 21} // C√°c gi·ªù kh·ªüi h√†nh trong ng√†y

// 	// L·∫•y th√¥ng tin chi ti·∫øt c·ªßa t·∫•t c·∫£ c√°c nh√† xe v√† xe
// 	var companies []models.Company
// 	cursor, _ := companyCollection.Find(ctx, bson.M{})
// 	cursor.All(ctx, &companies)

// 	var vehicles []models.Vehicle
// 	cursor, _ = vehicleCollection.Find(ctx, bson.M{})
// 	cursor.All(ctx, &vehicles)

// 	// T·∫°o map ƒë·ªÉ d·ªÖ d√†ng truy xu·∫•t th√¥ng tin
// 	companyMap := make(map[primitive.ObjectID]models.Company)
// 	for _, c := range companies {
// 		companyMap[c.ID] = c
// 	}
// 	vehicleMap := make(map[primitive.ObjectID]models.Vehicle)
// 	for _, v := range vehicles {
// 		vehicleMap[v.ID] = v
// 	}

// 	// T·∫°o chuy·∫øn ƒëi cho 7 ng√†y t·ªõi
// 	for day := 0; day < 7; day++ {
// 		for _, companyID := range keys(vehicleData) {
// 			vehicleIDs := vehicleData[companyID]
// 			for _, hour := range departureHours {
// 				// Ch·ªçn ng·∫´u nhi√™n 1 tuy·∫øn v√† 1 lo·∫°i xe
// 				route := routes[rand.Intn(len(routes))]
// 				vehicleID := vehicleIDs[rand.Intn(len(vehicleIDs))]
// 				vehicle := vehicleMap[vehicleID]

// 				now := time.Now()
// 				departureTime := time.Date(now.Year(), now.Month(), now.Day(), hour, 0, 0, 0, now.Location()).AddDate(0, 0, day)
// 				// Chuy·∫øn t·ª´ SG -> DL m·∫•t kho·∫£ng 7 ti·∫øng
// 				arrivalTime := departureTime.Add(7 * time.Hour)

// 				newTrip := models.Trip{
// 					ID:                  primitive.NewObjectID(),
// 					CompanyID:           companyID,
// 					VehicleID:           vehicleID,
// 					Route:               route,
// 					DepartureTime:       departureTime,
// 					ExpectedArrivalTime: arrivalTime,
// 					Price:               float64(250000 + rand.Intn(150000)), // Gi√° t·ª´ 250k -> 400k
// 					Seats:               generateSeats(vehicle.TotalSeats),
// 				}
// 				tripsToInsert = append(tripsToInsert, newTrip)
// 			}
// 		}
// 	}

// 	_, err := tripCollection.InsertMany(ctx, tripsToInsert)
// 	if err != nil {
// 		log.Fatalf("L·ªói khi seed trips: %v", err)
// 	}

// 	log.Printf("ƒê√£ t·∫°o %d trips.", len(tripsToInsert))
// }

// // generateSeats t·∫°o danh s√°ch gh·∫ø cho m·ªôt chuy·∫øn ƒëi
// func generateSeats(totalSeats int) []models.Seat {
// 	seats := make([]models.Seat, totalSeats)
// 	for i := 0; i < totalSeats; i++ {
// 		seatNumber := fmt.Sprintf("A%02d", i+1)
// 		status := "available"
// 		// Fake m·ªôt v√†i gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc
// 		if rand.Float32() < 0.15 { // 15% c∆° h·ªôi gh·∫ø ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
// 			status = "booked"
// 		}
// 		seats[i] = models.Seat{SeatNumber: seatNumber, Status: status}
// 	}
// 	return seats
// }

// // H√†m ti·ªán √≠ch ƒë·ªÉ l·∫•y keys t·ª´ map
// func keys[K comparable, V any](m map[K]V) []K {
// 	keys := make([]K, 0, len(m))
// 	for k := range m {
// 		keys = append(keys, k)
// 	}
// 	return keys
// }